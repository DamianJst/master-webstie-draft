/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/ARPHumanoid.glb -o src/components/Humanoid.jsx -r public 
*/

import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
// import { useControls } from 'leva'

export function Humanoid(props) {
  const group = React.useRef()
  const { scene, animations } = useGLTF('/models/ARPHumanoid.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)
  // const { animation } = useControls({
  //   animation: {
  //     value: "A_Flight_Idle_A_0_A_Flight_Idle_A_IN_PLACE_remap",
  //     options: Object.keys(actions,)
  //   }
  // })

useEffect(()=>{
  // console.log(actions["A_Flight_Idle_A_0_A_Flight_Idle_A_IN_PLACE_remap"])
  // console.log(animation)
  actions["A_Flight_Idle_A_0_A_Flight_Idle_A_IN_PLACE_remap"].play();
},[actions])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="root">
          <primitive object={nodes.rootx} />
          <skinnedMesh name="Male_Base" geometry={nodes.Male_Base.geometry} material={materials['Material.003']} skeleton={nodes.Male_Base.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/ARPHumanoid.glb')
